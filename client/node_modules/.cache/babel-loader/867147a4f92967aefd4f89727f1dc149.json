{"ast":null,"code":"var _jsxFileName = \"/Users/riva/Downloads/Cap_exper/client/src/Spotistuff/SearchAndSearchRes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, memo, useCallback } from 'react';\nimport Online from './Online';\nimport Search from './Search';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchAndSearchRes = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  const [searchRes, setSearchRes] = useState();\n  const inputRef = useRef();\n  const changeSearchRes = useCallback(query => {\n    if (query) {\n      axios(`https://api.spotify.com/v1/search?limit=15&type=track&q=${query}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer ' + props.logInfo\n        }\n      }).then(response => {\n        if (response.data.tracks.items.length) {\n          setSearchRes(response.data);\n        } else {\n          setSearchRes(query);\n        }\n      });\n    } else {\n      setSearchRes(null);\n    }\n  }, [searchRes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      class: \"SearchOnline\",\n      placeh: \"Search for a song...\",\n      inputRef: inputRef,\n      changeSearchRes: changeSearchRes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Online, {\n      songs: searchRes,\n      logInfo: props.logInfo,\n      playlists: props.playlists,\n      getPlaylist: props.getPlaylist,\n      playlistTrack: props.playlistTrack,\n      setTracks: props.setTracks,\n      tracks: props.tracks,\n      setDispPlaylist: props.setDispPlaylist,\n      inputRef: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}, \"A0JdLgodXQqf0DzucRO4hRgjwKY=\")), \"A0JdLgodXQqf0DzucRO4hRgjwKY=\");\n\n_c2 = SearchAndSearchRes;\nexport default SearchAndSearchRes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchAndSearchRes$memo\");\n$RefreshReg$(_c2, \"SearchAndSearchRes\");","map":{"version":3,"sources":["/Users/riva/Downloads/Cap_exper/client/src/Spotistuff/SearchAndSearchRes.js"],"names":["React","useState","useRef","memo","useCallback","Online","Search","axios","SearchAndSearchRes","props","searchRes","setSearchRes","inputRef","changeSearchRes","query","method","headers","logInfo","then","response","data","tracks","items","length","playlists","getPlaylist","playlistTrack","setTracks","setDispPlaylist"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,WAAvC,QAAyD,OAAzD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,kBAAkB,iCAAGL,IAAI,SAACM,KAAK,IAAE;AAAA;;AACrC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACA,QAAMW,QAAQ,GAAGV,MAAM,EAAvB;AAEA,QAAMW,eAAe,GAAGT,WAAW,CAACU,KAAK,IAAG;AAC1C,QAAGA,KAAH,EAAS;AACPP,MAAAA,KAAK,CAAE,2DAA0DO,KAAM,EAAlE,EAAqE;AACtEC,QAAAA,MAAM,EAAE,KAD8D;AAEtEC,QAAAA,OAAO,EAAE;AAAC,2BAAkB,YAAYP,KAAK,CAACQ;AAArC;AAF6D,OAArE,CAAL,CAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,YAAGA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,KAArB,CAA2BC,MAA9B,EAAqC;AACnCZ,UAAAA,YAAY,CAACQ,QAAQ,CAACC,IAAV,CAAZ;AACD,SAFD,MAGI;AACFT,UAAAA,YAAY,CAACG,KAAD,CAAZ;AACD;AACF,OAXH;AAYD,KAbD,MAcI;AACFH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAlBkC,EAkBhC,CAACD,SAAD,CAlBgC,CAAnC;AAoBA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,cAAd;AAA6B,MAAA,MAAM,EAAC,sBAApC;AAA2D,MAAA,QAAQ,EAAEE,QAArE;AAA+E,MAAA,eAAe,EAAEC;AAAhG;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEH,SAAf;AAA0B,MAAA,OAAO,EAAED,KAAK,CAACQ,OAAzC;AAAkD,MAAA,SAAS,EAAIR,KAAK,CAACe,SAArE;AAAgF,MAAA,WAAW,EAAEf,KAAK,CAACgB,WAAnG;AAAgH,MAAA,aAAa,EAAEhB,KAAK,CAACiB,aAArI;AAAoJ,MAAA,SAAS,EAAEjB,KAAK,CAACkB,SAArK;AAAgL,MAAA,MAAM,EAAElB,KAAK,CAACY,MAA9L;AAAsM,MAAA,eAAe,EAAEZ,KAAK,CAACmB,eAA7N;AAA8O,MAAA,QAAQ,EAAEhB;AAAxP;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CA9B8B,kCAAP,iCAAxB;;MAAMJ,kB;AAgCN,eAAeA,kBAAf","sourcesContent":["import React, {useState, useRef, memo, useCallback} from 'react';\r\nimport Online from './Online';\r\nimport Search from './Search';\r\n\r\nimport axios from 'axios';\r\n\r\nconst SearchAndSearchRes = memo(props=>{\r\n  const [searchRes, setSearchRes] = useState();\r\n  const inputRef = useRef();\r\n\r\n  const changeSearchRes = useCallback(query =>{\r\n    if(query){\r\n      axios(`https://api.spotify.com/v1/search?limit=15&type=track&q=${query}`, {\r\n          method: 'GET',\r\n          headers: {'Authorization' : 'Bearer ' + props.logInfo}\r\n        })\r\n        .then((response) => {\r\n          if(response.data.tracks.items.length){\r\n            setSearchRes(response.data);\r\n          }\r\n          else{\r\n            setSearchRes(query);\r\n          }\r\n        })\r\n    }\r\n    else{\r\n      setSearchRes(null);\r\n    }\r\n  }, [searchRes])\r\n\r\n  return(\r\n    <>\r\n      <Search class=\"SearchOnline\" placeh=\"Search for a song...\" inputRef={inputRef} changeSearchRes={changeSearchRes}/>\r\n      <Online songs={searchRes} logInfo={props.logInfo} playlists = {props.playlists} getPlaylist={props.getPlaylist} playlistTrack={props.playlistTrack} setTracks={props.setTracks} tracks={props.tracks} setDispPlaylist={props.setDispPlaylist} inputRef={inputRef} />\r\n    </>\r\n  )\r\n})\r\n\r\nexport default SearchAndSearchRes;\r\n"]},"metadata":{},"sourceType":"module"}